import sys
from PyQt5 import QtWidgets, QtCore, QtGui
import sqlite3 # Import the sqlite3 module
import bcrypt # Import bcrypt for password hashing

# Import autogenerated UI classes
from login_ui import Ui_Form # This is the UI for your DESIRED original login/welcome page
from login_form import LoginUi_Form # This is the UI for the UNDESIRED login page
from register_form import RegisterUi_Form
# --- NEW: Import your SidebarUiForm wrapper ---
from dashboard_form import SidebarUiForm


# Wrapper for your login_ui (Enter page, which is your desired original login/welcome)
class EnterUiForm(QtWidgets.QWidget):
    # This signal will now be used to trigger the actual login attempt from this page
    login_attempt_signal = QtCore.pyqtSignal(str, str) # Emits username and password
    switch_to_register_signal = QtCore.pyqtSignal()

    def __init__(self):
        super().__init__()
        self.ui = Ui_Form()
        self.ui.setupUi(self)

        # Connect the "L o g I n" button to a method that emits the login attempt signal
        self.ui.pushButton.clicked.connect(self._emit_login_attempt)
        # Assuming forgotPasswordLabel_2 is the "Register Here" link on the welcome page
        self.ui.forgotPasswordLabel_2.clicked.connect(self.switch_to_register_signal.emit)

    def _emit_login_attempt(self):
        username = self.ui.lineEdit.text()
        password = self.ui.lineEdit_2.text()
        self.login_attempt_signal.emit(username, password)


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MindZap - Application")
        self.setGeometry(100, 100, 749, 650)

        self.stacked_widget = QtWidgets.QStackedWidget()
        self.setCentralWidget(self.stacked_widget)

        # Initialize the database
        self.init_db()

        # --- Setup Enter Page (Your desired original login/welcome page) ---
        self.enter_form_widget = EnterUiForm()
        self.stacked_widget.addWidget(self.enter_form_widget)
        print(f"Added Enter Page to stacked widget. Index: {self.stacked_widget.indexOf(self.enter_form_widget)}") # Debug
        # Connect the login attempt from the Enter page to a new handler
        self.enter_form_widget.login_attempt_signal.connect(self.handle_enter_page_login)
        self.enter_form_widget.switch_to_register_signal.connect(self.show_register_page)

        # --- Setup Login Page (The one you DON'T want to use for primary login) ---
        self.undesired_login_form_widget = QtWidgets.QWidget()
        self.undesired_login_ui = LoginUi_Form()
        self.undesired_login_ui.setupUi(self.undesired_login_form_widget)
        self.stacked_widget.addWidget(self.undesired_login_form_widget)
        print(f"Added Undesired Login Page to stacked widget. Index: {self.stacked_widget.indexOf(self.undesired_login_form_widget)}") # Debug
        self.undesired_login_ui.switch_to_register_signal.connect(self.show_register_page)
        self.undesired_login_ui.login_successful_signal.connect(self.handle_login_success)


        # --- Setup Register Page ---
        self.register_form_widget = QtWidgets.QWidget()
        self.register_ui = RegisterUi_Form()
        self.register_ui.setupUi(self.register_form_widget)
        self.stacked_widget.addWidget(self.register_form_widget)
        print(f"Added Register Page to stacked widget. Index: {self.stacked_widget.indexOf(self.register_form_widget)}") # Debug
        self.register_ui.registration_successful_signal.connect(self.handle_registration_success)
        self.register_ui.switch_to_login_signal.connect(self.show_enter_page)

        # --- Setup Main App Dashboard (Your "slidebar" content) ---
        self.main_app_dashboard = SidebarUiForm() # Use your custom dashboard wrapper
        self.stacked_widget.addWidget(self.main_app_dashboard)
        print(f"Added Main App Dashboard (SidebarUiForm) to stacked widget. Index: {self.stacked_widget.indexOf(self.main_app_dashboard)}") # Debug


        # Set the initial page to the enter screen
        self.show_enter_page()

    def init_db(self):
        """Initializes the SQLite database and creates the users table if it doesn't exist."""
        try:
            conn = sqlite3.connect('mindzap.db')
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    full_name TEXT NOT NULL,
                    phone_number TEXT,
                    email TEXT UNIQUE NOT NULL,
                    country TEXT,
                    password_hash TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
            conn.close()
            print("Database initialized successfully.")
        except sqlite3.Error as e:
            print(f"Database initialization error: {e}")
            QtWidgets.QMessageBox.critical(self, "Database Error", f"Failed to initialize database: {e}")


    def show_enter_page(self):
        """Displays your desired original login/welcome page."""
        self.stacked_widget.setCurrentWidget(self.enter_form_widget)
        self.setWindowTitle("MindZap - Welcome")
        print(f"Showing Enter Page. Current widget: {self.stacked_widget.currentWidget().__class__.__name__}") # Debug
        # Clear fields in enter_form_widget here if needed
        try:
            self.enter_form_widget.ui.lineEdit.clear()
            self.enter_form_widget.ui.lineEdit_2.clear()
        except AttributeError:
            pass

    def show_undesired_login_page(self):
        """Displays the login page you DON'T want to use for primary login."""
        self.stacked_widget.setCurrentWidget(self.undesired_login_form_widget)
        self.setWindowTitle("MindZap - Login (Undesired)")
        print(f"Showing Undesired Login Page. Current widget: {self.stacked_widget.currentWidget().__class__.__name__}") # Debug
        # Clear fields in undesired_login_ui here if needed

    def show_register_page(self):
        """Displays the registration page."""
        self.stacked_widget.setCurrentWidget(self.register_form_widget)
        self.setWindowTitle("MindZap - Register")
        print(f"Showing Register Page. Current widget: {self.stacked_widget.currentWidget().__class__.__name__}") # Debug
        # Clear fields in register_ui here if needed
        try:
            self.register_ui.lineEdit_full_name.clear()
            self.register_ui.lineEdit_phone_number.clear()
            self.register_ui.lineEdit_password.clear()
            self.register_ui.lineEdit_email.clear()
            self.register_ui.lineEdit_country.clear()
            self.register_ui.lineEdit_confirm_password.clear()
        except AttributeError:
            pass

    def handle_enter_page_login(self, email, password):
        """
        Handles the login attempt from the initial welcome/login page (EnterUiForm).
        Authenticates against the SQLite database using bcrypt.
        """
        print(f"Attempting login from Welcome page with Email: {email}, Password: {password}")
        try:
            conn = sqlite3.connect('mindzap.db')
            cursor = conn.cursor()
            # Fetch user by email
            cursor.execute("SELECT password_hash FROM users WHERE email=?", (email,))
            result = cursor.fetchone()
            conn.close()

            if result:
                stored_password_hash = result[0]
                # Check if the entered password matches the stored hash
                if bcrypt.checkpw(password.encode('utf-8'), stored_password_hash):
                    print("Login successful! Navigating to dashboard.")
                    self.handle_login_success(email)
                else:
                    print("Login failed: Invalid password.")
                    QtWidgets.QMessageBox.warning(self, "Login Failed", "Invalid username or password.")
                    self.enter_form_widget.ui.lineEdit_2.clear() # Clear password on failure
            else:
                print("Login failed: User not found.")
                QtWidgets.QMessageBox.warning(self, "Login Failed", "Invalid username or password.")
                self.enter_form_widget.ui.lineEdit_2.clear() # Clear password on failure
        except sqlite3.Error as e:
            print(f"Database error during login: {e}")
            QtWidgets.QMessageBox.critical(self, "Login Error", f"An error occurred during login: {e}")
            self.enter_form_widget.ui.lineEdit_2.clear()
        except Exception as e:
            print(f"An unexpected error occurred during login: {e}")
            QtWidgets.QMessageBox.critical(self, "Login Error", f"An unexpected error occurred: {e}")
            self.enter_form_widget.ui.lineEdit_2.clear()


    def handle_registration_success(self):
        """
        Handles actions after successful user registration.
        Inserts new user data into the SQLite database with hashed password.
        """
        # Retrieve data from register_ui form fields
        full_name = self.register_ui.lineEdit_full_name.text()
        phone_number = self.register_ui.lineEdit_phone_number.text()
        email = self.register_ui.lineEdit_email.text()
        country = self.register_ui.lineEdit_country.text()
        password = self.register_ui.lineEdit_password.text()
        confirm_password = self.register_ui.lineEdit_confirm_password.text()

        if not all([full_name, email, password, confirm_password]):
            QtWidgets.QMessageBox.warning(self, "Registration Error", "Please fill in all required fields.")
            return

        if password != confirm_password:
            QtWidgets.QMessageBox.warning(self, "Registration Error", "Passwords do not match.")
            self.register_ui.lineEdit_confirm_password.clear()
            self.register_ui.lineEdit_password.clear()
            return

        try:
            # Hash the password before storing it
            hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

            conn = sqlite3.connect('mindzap.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO users (full_name, phone_number, email, country, password_hash) VALUES (?, ?, ?, ?, ?)",
                (full_name, phone_number, email, country, hashed_password)
            )
            conn.commit()
            conn.close()
            print(f"User {email} registered successfully.")
            QtWidgets.QMessageBox.information(self, "Registration", "Registration successful! Please log in.")
            # After successful registration, always go back to the DESIRED welcome/login page
            self.show_enter_page()
        except sqlite3.IntegrityError:
            print(f"Registration failed: Email {email} already exists.")
            QtWidgets.QMessageBox.warning(self, "Registration Error", "Email already registered. Please use a different email or log in.")
        except sqlite3.Error as e:
            print(f"Database error during registration: {e}")
            QtWidgets.QMessageBox.critical(self, "Registration Error", f"An error occurred during registration: {e}")
        except Exception as e:
            print(f"An unexpected error occurred during registration: {e}")
            QtWidgets.QMessageBox.critical(self, "Registration Error", f"An unexpected error occurred: {e}")


    def handle_login_success(self, email):
        """
        Handles actions after a successful login from ANY login source.
        This should ALWAYS lead to your main application dashboard.
        """
        print(f"User '{email}' logged in successfully! Redirecting to dashboard.")
        QtWidgets.QMessageBox.information(self, "Welcome", f"Welcome, {email}!")
        # Proceed to main app dashboard (your "slidebar" content)
        self.stacked_widget.setCurrentWidget(self.main_app_dashboard)
        self.setWindowTitle(f"MindZap - Dashboard ({email})")
        print(f"After setting current widget. Current widget: {self.stacked_widget.currentWidget().__class__.__name__}") # Debug


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
